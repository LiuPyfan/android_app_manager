#!/bin/bash

if [ "x$1" == "x--create" ] ; then
   appname=$2
   package=$3
   rootclass=$4
   icon=$5
   appdisplay=$6
   resourcename=$7
   rosappname=$8
   cat > AndroidManifest.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
	package="$package" android:versionCode="1"
	android:versionName="1.0">
	<uses-sdk android:minSdkVersion="9" />

	<application android:icon="@drawable/$icon" android:label="@string/app_name">

		<activity android:name=".$appname" android:label="@string/app_name"
			android:screenOrientation="landscape" android:configChanges="orientation|keyboardHidden">
			<intent-filter>
				<action android:name="android.intent.action.MAIN" />
				<category android:name="android.intent.category.LAUNCHER" />
			</intent-filter>
			<intent-filter>
				<action android:name="$package.$rootclass" />
				<category android:name="android.intent.category.DEFAULT" />
			</intent-filter>
		</activity>
		<activity android:name="ros.android.activity.MasterChooserActivity"
			android:label="@string/app_name">
		</activity>
	</application>

	<uses-permission android:name="android.permission.INTERNET"></uses-permission>
  <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
  <uses-permission android:name="android.permission.ACCESS_WIFI_STATE"/>
  <uses-permission android:name="android.permission.CHANGE_WIFI_STATE"/>
</manifest>
EOF
   cat > manifest.xml << EOF
<package>
  <description brief="$appdisplay">
  	       TODO
  </description>
  <author>TODO</author>
  <license>BSD</license>
  <review status="unreviewed" notes=""/>
  <url>http://ros.org/wiki/ TODO</url>
  <depend package="appmanandroid"/>

  <export>
    <rosjava-android-app />
  </export>
</package>
EOF
   cat > Makefile << EOF
include \$(shell rospack find rosjava_bootstrap)/rosjava.mk
EOF
   cat > build.xml << EOF
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="compile" name="$appname">
  
  <property file="ros.properties"/>
  <import file="\${ros.pkg.appmanandroid.dir}/build_app.xml" />
</project>
EOF

   mkdir -p res/values
   mkdir -p res/drawable
   mkdir -p res/layout
   mkdir -p res/menu
   mkdir -p src

   cat > res/values/strings.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">$appdisplay</string>
</resources>
EOF
   cat > res/layout/main.xml <<EOF
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:orientation="horizontal"
              android:layout_width="fill_parent"
              android:layout_height="fill_parent"
              android:id="@+id/main_layout">
  <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
                android:orientation="vertical"
                android:layout_width="fill_parent"
                android:layout_height="fill_parent"
                android:id="@+id/main_layout">
    <LinearLayout android:orientation="horizontal" android:layout_width="fill_parent" android:layout_height="wrap_content"
                  android:gravity="right"
                  android:background="#ff404040"
                  android:id="@+id/top_bar" />
    <!--Add your layout here -->
  </LinearLayout>
</LinearLayout>
EOF

   cat > res/menu/${resourcename}_menu.xml <<EOF
<?xml version="1.0" encoding="utf-8"?>
<menu xmlns:android="http://schemas.android.com/apk/res/android">
  <item android:title="Kill" android:id="@+id/kill"></item>
</menu>
EOF


   dir=src/`echo $package | sed s/\\\\./\\\\//g`
   mkdir -p $dir
   cat > $dir/${rootclass}.java <<EOF
/*
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package $package;

import org.ros.exception.RemoteException;
import ros.android.activity.AppManager;
import ros.android.activity.RosAppActivity;
import android.os.Bundle;
import org.ros.node.Node;
import android.view.Window;
import android.view.WindowManager;
import android.util.Log;
import org.ros.node.service.ServiceClient;
import org.ros.service.app_manager.StartApp;
import org.ros.node.service.ServiceResponseListener;
import android.widget.Toast;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import ros.android.util.Dashboard;
import android.widget.LinearLayout;

//TODO: search for all instances of TODO

/**
 * @author damonkohler@google.com (Damon Kohler)
 * @author pratkanis@willowgarage.com (Tony Pratkanis)
 */
public class $rootclass extends RosAppActivity {
  
  private String robotAppName;
  private String cameraTopic;
  private Dashboard dashboard;

  //Please only edit the functions above this line.
  //You should not need to edit the ones below. If you find
  //yourself doing so, that could be a feature request.

  /** Called when the activity is first created. */
  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    //Setup the window.
    requestWindowFeature(Window.FEATURE_NO_TITLE);
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        WindowManager.LayoutParams.FLAG_FULLSCREEN);
    setContentView(R.layout.main);

    //Get the name of the application to start on the robot from the application system
    //if it is null, instead start the default application.
    robotAppName = getIntent().getStringExtra(AppManager.PACKAGE + ".robot_app_name");
    if( robotAppName == null ) {
      robotAppName = "$rosappname";
    }
    
    //Find the dashboard, the top bar that allows the user to see the robot's battery
    //and reset the robot's motors and breakers.
    dashboard = new Dashboard(this);
    dashboard.setView((LinearLayout)findViewById(R.id.top_bar),
                      new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, 
                                                    LinearLayout.LayoutParams.WRAP_CONTENT));
  
    //TODO: add code
    //Called on creation. ROS hasn't started yet, so don't start
    //anything that depends on ROS. Instead, look up things like
    //resources. Initialize your layout here.
  }
  
  @Override
  protected void onNodeCreate(Node node) {
    super.onNodeCreate(node);
    try {
      //Start up the application on the robot and start the dashboard.
      startApp();
      dashboard.start(node);
      //TODO: Put your initialization code here
    } catch (Exception ex) {
      Log.e("$rootclass", "Init error: " + ex.toString());
      safeToastStatus("Failed: " + ex.getMessage());
    }
  }

  @Override
  protected void onNodeDestroy(Node node) {
    super.onNodeDestroy(node);
    dashboard.stop();
    //TODO: Put your shutdown code here for things the reference the node
  }
  
  
  /** Starts the application on the robot. Calls the service with the name */
  private void startApp() {
    appManager.startApp(robotAppName,
        new ServiceResponseListener<StartApp.Response>() {
          @Override
          public void onSuccess(StartApp.Response message) {
          }
          @Override
          public void onFailure(RemoteException e) {
            safeToastStatus("Failed: " + e.getMessage());
          }
        });
  }

  /** Creates the menu for the options */
  @Override
  public boolean onCreateOptionsMenu(Menu menu) {
    MenuInflater inflater = getMenuInflater();
    inflater.inflate(R.menu.${resourcename}_menu, menu);
    return true;
  }

  /** Run when the menu is clicked. */
  @Override
  public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
    case R.id.kill: //Shutdown if the user clicks kill
      android.os.Process.killProcess(android.os.Process.myPid());
      return true;
    //TODO: add cases for any additional menu items here.
    default:
      return super.onOptionsItemSelected(item);
    }
  }

  /** Displays a status tip at the bottom of the screen from any thread. */
  private void safeToastStatus(final String message) {
    runOnUiThread(new Runnable() {
        @Override
        public void run() {
          Toast.makeText($rootclass.this, message, Toast.LENGTH_SHORT).show();
        }
      });
  } 
}
EOF
else
   echo "Usage: $0 --create <appname> <package> <rootclass> <icon>"
   echo "                   <display-name> <resource-name> <rosappname>:"
   echo "              creates all the files for a ros android app"
   echo "              WARNING: will overwrite existing files!"
   echo "              Run this inside of a pre-existing directory inside"
   echo "              your ROS package path."
   echo "Example: $0 --create PanTilt ros.android.pantilt PanTilt pantilt \"Pan and Tilt Viewer\" pan_tilt \"pr2_pan_tilt/pr2_pan_tilt\""
fi


